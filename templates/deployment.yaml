---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "er-frappe.fullname" . }}
  labels:
{{ include "er-frappe.labels" . | indent 4 }}
  {{- if .Values.targetNamespace }}
  namespace: {{ .Values.targetNamespace }}
  {{- end -}}
{{- "spec:" | nindent 0 }}
  serviceName: {{ .Release.Name | replace " " "-" }}
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "er-frappe.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "er-frappe.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.etchosts }}
      hostAliases:
        {{- toYaml . | nindent 8 -}}
    {{- end -}}
      {{ "containers:" | nindent 6 }}
        - name: frappe
          image: {{ .Values.image.frappeapp.repository }}:{{ .Values.branch }}
          imagePullPolicy: {{ .Values.image.frappeapp.pullPolicy | default "Always" }}
          ports:
            - name: nginx
              containerPort: 8000
              protocol: TCP
              #livenessProbe:
              #initialDelaySeconds: 10
              #failureThreshold: 5
              #timeoutSeconds: 3
              #httpGet:
              #path: {{ .Values.image.frappeapp.livenessProbe.httpGetPath | default "/app-health" }}
              # port: nginx
          readinessProbe:
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 3
            httpGet:
              path: {{ .Values.image.frappeapp.livenessProbe.httpGetPath | default "/app-health" }}
              port: nginx
          env:
            - name: GUNI_WORKER_CONNECTIONS
              valueFrom:
                configMapKeyRef:
                    key: gunicorn.connections.per.worker
                    name: {{ .Release.Name }}-server-config
            - name: GUNI_WORKERS
              valueFrom:
                configMapKeyRef:
                    key: gunicorn.workers
                    name: {{ .Release.Name }}-server-config
            - name: KAFKA_CONFIG
              valueFrom:
                configMapKeyRef:
                  key: kafka.config
                  name: {{ .Release.Name }}-server-config
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: db.host
                  name: {{ .Release.Name }}-server-config
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: db.name
                  name: {{ .Release.Name }}-server-config
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: db.password
                  name: {{ .Release.Name }}-secrets
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin.password
                  name: {{ .Release.Name }}-secrets
          resources: {{ toYaml .Values.resources }}
          {{ "stdin: true" | nindent 10 }}
          tty: true
          volumeMounts:
            # - mountPath: /home/frappe/docker-bench/Procfile
            #   name: er-frappe-procfile-config-vol
            #   subPath: Procfile
            - mountPath: /home/frappe/docker-bench/logs
              name: er-frappe-logs-dir
            - mountPath: "/home/frappe/docker-bench/sites/site1.docker"
              name: er-frappe-sites-vol
              subPath: "site1.docker"
            - mountPath: "/home/frappe/docker-bench/sites/currentsite.txt"
              name: er-frappe-sites-vol
              subPath: "currentsite.txt"
            - mountPath: "/home/frappe/docker-bench/sites/apps.txt"
              name: er-frappe-sites-vol
              subPath: "apps.txt"
            - mountPath: "/home/frappe/docker-bench/sites/common_site_config.json"
              name: er-frappe-sites-vol
              subPath: "common_site_config.json"
        {{- if .Values.image.monitoring.enabled }}
        - name: {{ .Chart.Name }}-monitor
          image: "{{ .Values.image.monitoring.repository }}:{{ .Values.image.monitoring.tag }}"
          imagePullPolicy: {{ .Values.image.monitoring.pullPolicy }}
          ports:
            - name: monitor
              containerPort: {{ .Values.image.monitoring.port }}
              protocol: {{ .Values.image.monitoring.protocol | default "TCP" }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.image.fluentd.enabled }}
        - name: {{ .Chart.Name }}-log-collector
          image: "{{ .Values.image.fluentd.repository }}:release"
          imagePullPolicy: {{ .Values.image.fluentd.pullPolicy }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: log-collector
              containerPort: {{ .Values.image.fluentd.externalPort }}
              protocol: TCP
          volumeMounts:
            - mountPath: /fluentd/etc
              name: er-frappe-fluentd-config-vol
            - mountPath: /fluentd/log
              name: er-frappe-logs-dir
          resources: {{ toYaml .Values.resources | nindent 12 -}}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      restartPolicy: Always
      volumes:
        - name: er-frappe-sites-vol
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-sites-pvc
        # - name: er-frappe-procfile-config-vol
        #   configMap:
        #     name : {{ .Release.Name }}-procfile-config
        #     items:
        #       - key : Procfile
        #         path: Procfile
        - name: er-frappe-fluentd-config-vol
          configMap:
            name : {{ .Release.Name }}-fluentd-config
            items:
            - key : fluent.conf
              path: fluent.conf
        # Volume used for sharing log files between fluentd and frappe containers.
        # Usage of emptyDir make it volatile and logs from evicted pods will be lost, if not published.
        - name : er-frappe-logs-dir
          emptyDir: {}
{{ if .Values.redisserver.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | replace " " "-" }}-cache
  {{- if .Values.targetNamespace }}
  namespace: {{ .Values.targetNamespace }}
  {{- end -}}
{{- "spec:" | nindent 0 }}
  serviceName: {{ .Release.Name | replace " " "-" }}
  replicas: {{ if .Values.redisserver.cache.clusterEnabled }} {{ .Values.redisserver.cache.replicaCount | default 6 -}}{{ else }} 1{{ end }}
  selector:
    matchLabels:
      app: {{ .Release.Name | replace " " "-" }}-redis-cache
  template:
    metadata:
      labels:
        app: {{ .Release.Name | replace " " "-" }}-redis-cache
    spec:
      containers:
      - name: redis-cache
        image: {{ .Values.redisserver.image.repository }}:{{ .Values.redisserver.image.tag }}
        imagePullPolicy: {{ .Values.redisserver.image.pullPolicy | default "Always" }}
        command: ["/etc/conf.d/update-node.sh", "redis-server", "/etc/conf.d/redis_cache.conf"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        stdin: true
        tty: true
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: {{ .Values.redisserver.cache.listenport  | default 6379}}
            name: client
          - containerPort: {{ add .Values.redisserver.cache.listenport 10000 }}
            name: gossip
        volumeMounts:
        - mountPath: /etc/conf.d
          name: er-redis-config
          readOnly: true
        - mountPath: /data
          name: data
          readOnly: false
      restartPolicy: Always
      volumes:
      - name : er-redis-config
        configMap:
          name: {{ .Release.Name | replace " " "-" }}-redis-config
          defaultMode: 0755
      {{- if .Values.redisserver.cache.persistence.enabled | default false -}}
  {{- "volumeClaimTemplates:" | nindent 2 }}
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.redisserver.cache.persistence.storageCapacityinGi  | default 1 -}}Gi
      {{ else }}
      - name: data
        emptyDir: {}
      {{ end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | replace " " "-" }}-queue
  {{- if .Values.targetNamespace }}
  namespace: {{ .Values.targetNamespace }}
  {{- end -}}
{{- "spec:" | nindent 0 }}
  serviceName: {{ .Release.Name | replace " " "-" }}
  replicas: {{ if .Values.redisserver.queue.clusterEnabled }} {{ .Values.redisserver.queue.replicaCount | default 6 -}}{{ else }} 1{{ end }}
  selector:
    matchLabels:
      app: {{ .Release.Name | replace " " "-" }}-redis-queue
  template:
    metadata:
      labels:
        app: {{ .Release.Name | replace " " "-" }}-redis-queue
    spec:
      containers:
      - name: redis-cache
        image: {{ .Values.redisserver.image.repository }}:{{ .Values.redisserver.image.tag }}
        imagePullPolicy: {{ .Values.redisserver.image.pullPolicy | default "Always" }}
        command: ["/etc/conf.d/update-node.sh", "redis-server", "/etc/conf.d/redis_queue.conf"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        stdin: true
        tty: true
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: {{ .Values.redisserver.queue.listenport  | default 6379}}
            name: client
          - containerPort: {{ add .Values.redisserver.queue.listenport 10000 }}
            name: gossip
        volumeMounts:
        - mountPath: /etc/conf.d
          name: er-redis-config
          readOnly: true
        - mountPath: /data
          name: data
          readOnly: false
      restartPolicy: Always
      volumes:
      - name : er-redis-config
        configMap:
          name: {{ .Release.Name | replace " " "-" }}-redis-config
          defaultMode: 0755
      {{- if .Values.redisserver.queue.persistence.enabled | default false -}}
  {{- "volumeClaimTemplates:" | nindent 2 }}
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.redisserver.queue.persistence.storageCapacityinGi  | default 1 -}}Gi
      {{ else }}
      - name: data
        emptyDir: {}
      {{ end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | replace " " "-" }}-socketio
  {{- if .Values.targetNamespace }}
  namespace: {{ .Values.targetNamespace }}
  {{- end -}}
{{- "spec:" | nindent 0 }}
  serviceName: {{ .Release.Name | replace " " "-" }}
  replicas: {{ if .Values.redisserver.socketio.clusterEnabled }} {{ .Values.redisserver.socketio.replicaCount | default 6 -}}{{ else }} 1{{ end }}
  selector:
    matchLabels:
      app: {{ .Release.Name | replace " " "-" }}-redis-socketio
  template:
    metadata:
      labels:
        app: {{ .Release.Name | replace " " "-" }}-redis-socketio
    spec:
      containers:
      - name: redis-cache
        image: {{ .Values.redisserver.image.repository }}:{{ .Values.redisserver.image.tag }}
        imagePullPolicy: {{ .Values.redisserver.image.pullPolicy | default "Always" }}
        command: ["/etc/conf.d/update-node.sh", "redis-server", "/etc/conf.d/redis_socketio.conf"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        stdin: true
        tty: true
        resources: {}
          # limits:
          #   memory: "256Mi"
          #   cpu: "100m"
        ports:
          - containerPort: {{ .Values.redisserver.socketio.listenport  | default 6379}}
            name: client
          - containerPort: {{ add .Values.redisserver.socketio.listenport 10000 }}
            name: gossip
        volumeMounts:
        - mountPath: /etc/conf.d
          name: er-redis-config
          readOnly: true
        - mountPath: /data
          name: data
          readOnly: false
      restartPolicy: Always
      volumes:
      - name : er-redis-config
        configMap:
          name: {{ .Release.Name | replace " " "-" }}-redis-config
          defaultMode: 0755
      {{- if .Values.redisserver.socketio.persistence.enabled | default false -}}
  {{- "volumeClaimTemplates:" | nindent 2 }}
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.redisserver.socketio.persistence.storageCapacityinGi  | default 1 -}}Gi
      {{ else }}
      - name: data
        emptyDir: {}
      {{ end }}
{{ end }}
